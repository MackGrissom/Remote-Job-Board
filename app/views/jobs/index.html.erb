<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Freely - Work Freely, Hire Globally</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <style>
        html, body { height: 100%; margin: 0; padding: 0; overflow: hidden; }
        #map { width: 100%; height: 100%; }
        #job-listings {
            max-height: calc(100vh - 12rem);
            overflow-y: auto;
        }
        .job-marker-icon {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 30px;
            height: 30px;
            background-color: #ff9800;
            border-radius: 50%;
            border: 2px solid #ffffff;
            font-size: 20px;
            position: relative;
            color: white;
        }
        .job-marker {
            line-height: 30px;
        }
        .custom-popup .leaflet-popup-content-wrapper {
            background-color: white;
            color: #333;
            border-radius: 8px;
            padding: 1px;
            box-shadow: 0 3px 14px rgba(0,0,0,0.4);
            border-left: 5px solid #ff9800;
        }
        .custom-popup .leaflet-popup-content {
            margin: 13px 19px;
            line-height: 1.4;
        }
        .custom-popup .leaflet-popup-tip {
            background: white;
        }
        .apply-now-btn {
            background-color: #ff9800;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s;
        }
        .apply-now-btn:hover {
            background-color: #f57c00;
        }
        .job-tooltip {
            visibility: hidden;
            width: 200px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .job-marker-icon:hover .job-tooltip {
            visibility: visible;
            opacity: 1;
        }
        .custom-popup {
            font-family: 'Arial', sans-serif;
            color: #333;
            max-width: 300px;
        }
        .custom-popup h3 {
            font-size: 18px;
            margin: 0 0 10px;
            color: #ff9800;
        }
        .custom-popup p {
            margin: 5px 0;
            font-size: 14px;
            line-height: 1.4;
        }
        .custom-popup .job-detail {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        .custom-popup .job-detail-icon {
            width: 20px;
            margin-right: 10px;
            opacity: 0.7;
        }
        .location-filter-btn {
            flex: 1 0 auto;
            min-width: 120px;
            max-width: 200px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        @media (max-width: 640px) {
            .location-filter-btn {
                min-width: 100px;
                font-size: 0.75rem;
            }
        }
        @media (max-width: 480px) {
            .location-filter-btn {
                min-width: 80px;
                font-size: 0.7rem;
            }
        }
        .marker-cluster-small,
        .marker-cluster-medium,
        .marker-cluster-large {
            background-color: rgba(255, 152, 0, 0.6);
        }
        .marker-cluster-small div,
        .marker-cluster-medium div,
        .marker-cluster-large div {
            background-color: rgba(255, 152, 0, 0.8);
        }
        .marker-cluster {
            background-clip: padding-box;
            border-radius: 20px;
        }
        .marker-cluster div {
            width: 30px;
            height: 30px;
            margin-left: 5px;
            margin-top: 5px;
            text-align: center;
            border-radius: 15px;
            font: 12px "Helvetica Neue", Arial, Helvetica, sans-serif;
            color: #fff;
        }
        .marker-cluster span {
            line-height: 30px;
        }
        @media (max-width: 768px) {
            #map { height: 300px; }
            #job-listings { max-height: none; overflow-y: visible; }
        }
        .industry-filter-btn {
            @apply px-3 py-1 text-xs md:text-sm border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500;
        }
        .industry-filter-btn.active {
            @apply bg-orange-100 border-orange-500;
        }

        /* Add these new styles */
        #map-filter-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            background-color: #ff9800;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            transition: background-color 0.3s;
        }

        #map-filter-btn:hover {
            background-color: #f57c00;
        }

        #map-filter-btn svg {
            margin-right: 8px;
        }

        @media (max-width: 768px) {
            #map-filter-btn {
                font-size: 14px;
                padding: 8px 12px;
            }
        }
    </style>
</head>
<body class="flex flex-col h-full bg-gray-100">
    <div class="flex flex-col h-full">
        <div class="p-4 bg-gray-50 border-b border-gray-200 flex flex-col items-center">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Explore Global Remote Opportunities - Work From Anywhere</h2>
            
            <%= render partial: 'shared/stats_scroller', locals: {
                stats: [
                    { value: '1,000+', label: 'Verified Remote Jobs' },
                    { value: '150+', label: 'Countries' },
                    { value: '20,000+', label: 'Jobs Landed' }
                ]
            } %>
        </div>

        <div id="activeFilters" class="p-4 bg-white border-b border-gray-200 flex flex-wrap"></div>

        <div class="flex-grow flex flex-col md:flex-row">
            <div class="w-full md:w-1/2 flex flex-col">
                <div id="job-listings" class="flex-grow overflow-y-auto p-4 space-y-4">
                    <!-- Job listings will be dynamically inserted here -->
                </div>
            </div>
            <div class="w-full md:w-1/2 relative">
                <div id="map" class="w-full h-full min-h-[300px] md:min-h-[500px]"></div>
                <button id="map-filter-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clip-rule="evenodd" />
                    </svg>
                    Job Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Filter Modal -->
    <div id="filterModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 class="text-xl font-bold mb-4 text-gray-800">Job Filters</h2>
            <%= form_with url: jobs_path, method: :get, local: false, id: 'job-filter-form', class: 'space-y-4' do |f| %>
                <div>
                    <%= f.label :location, "Location", class: "block text-sm font-medium text-gray-700 mb-2" %>
                    <div class="flex flex-wrap gap-2">
                        <button type="button" 
                                class="location-filter-btn px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500"
                                data-location="">
                            üåç All Locations
                        </button>
                        <% [
                            ['üåé', 'North America'],
                            ['üåé', 'South America'],
                            ['üåç', 'Europe'],
                            ['üåè', 'Asia'],
                            ['üåç', 'Africa'],
                            ['üåè', 'Australia']
                        ].each do |emoji, continent| %>
                            <button type="button" 
                                    class="location-filter-btn px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500"
                                    data-location="<%= continent %>">
                                <%= emoji %> <%= continent %>
                            </button>
                        <% end %>
                    </div>
                    <%= f.hidden_field :location, id: 'location-filter' %>
                </div>

                <div>
                    <%= f.label :industry, "Industry", class: "block text-sm font-medium text-gray-700 mb-2" %>
                    <div class="flex flex-wrap gap-2">
                        <%= button_tag "All Industries", type: "button", class: "industry-filter-btn px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 active", data: { industry: "" } %>
                        <% tech_industries.each do |industry, emoji| %>
                            <%= button_tag type: "button", class: "industry-filter-btn px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500", data: { industry: industry } do %>
                                <%= emoji %> <%= industry %>
                            <% end %>
                        <% end %>
                    </div>
                    <%= f.hidden_field :industry, id: 'industry-filter' %>
                </div>
            <% end %>
        </div>
    </div>

    <%= javascript_tag do %>
      document.addEventListener('DOMContentLoaded', function() {
        const filterForm = document.getElementById('job-filter-form');
        const jobListings = document.getElementById('job-listings');
        const mapContainer = document.getElementById('map');
        let map;
        let markerClusterGroup;

        function initMap() {
          console.log('Initializing map...');
          if (!mapContainer) {
            console.error('Map container not found!');
            return;
          }

          mapContainer.style.height = '100%';

          map = L.map('map', {
            backgroundColor: '#ffffff',
            minZoom: 2,
            maxBounds: L.latLngBounds(L.latLng(-90, -180), L.latLng(90, 180))
          }).setView([20, 0], 3);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            backgroundColor: '#ffffff',
            noWrap: true
          }).addTo(map);

          console.log('Map initialized:', map);

          markerClusterGroup = L.markerClusterGroup({
            maxClusterRadius: 80,
            iconCreateFunction: function(cluster) {
              var childCount = cluster.getChildCount();
              var c = ' marker-cluster-';
              if (childCount < 10) {
                c += 'small';
              } else if (childCount < 100) {
                c += 'medium';
              } else {
                c += 'large';
              }
              return new L.DivIcon({
                html: '<div><span>' + childCount + '</span></div>',
                className: 'marker-cluster' + c,
                iconSize: new L.Point(40, 40)
              });
            }
          });
        }

        function zoomToContinent(continent) {
          const continentCoordinates = {
            'North America': { lat: 40, lng: -100, zoom: 3 },
            'South America': { lat: -15, lng: -60, zoom: 3 },
            'Europe': { lat: 50, lng: 10, zoom: 4 },
            'Asia': { lat: 30, lng: 100, zoom: 3 },
            'Africa': { lat: 0, lng: 20, zoom: 3 },
            'Australia': { lat: -25, lng: 135, zoom: 4 }
          };

          if (continent && continentCoordinates[continent]) {
            const coords = continentCoordinates[continent];
            map.setView([coords.lat, coords.lng], coords.zoom);
          } else {
            // Reset to world view
            map.setView([20, 0], 2);
          }
        }

        function updateFilters() {
          const formData = new FormData(filterForm);
          const searchParams = new URLSearchParams(formData);
          
          const selectedLocation = formData.get('location');
          const selectedIndustry = formData.get('industry');
          
          zoomToContinent(selectedLocation);
          
          fetchJobs(searchParams);
        }

        function fetchJobs(searchParams) {
          console.log('Fetching jobs with params:', searchParams.toString());
          fetch(`/jobs?${searchParams.toString()}`, {
            headers: {
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => response.json())
          .then(data => {
            console.log('Received data:', data);
            if (data.job_listings_html) {
              jobListings.innerHTML = data.job_listings_html;
              console.log('Updated job listings');
            }
            if (data.job_coordinates && Array.isArray(data.job_coordinates)) {
              console.log('Updating map with', data.job_coordinates.length, 'jobs');
              updateMap(data.job_coordinates);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            jobListings.innerHTML = '<p>Error loading job listings.</p>';
          });
        }

        function updateMap(jobCoordinates) {
          console.log('Updating map with job coordinates:', jobCoordinates);
          if (!map) {
            console.log('Map not initialized, initializing now...');
            initMap();
          }
          if (!map) {
            console.error('Failed to initialize map');
            return;
          }
          
          if (markerClusterGroup) {
            map.removeLayer(markerClusterGroup);
          }
          
          markerClusterGroup = L.markerClusterGroup();

          jobCoordinates.forEach((job, index) => {
            if (job && typeof job === 'object' && 'lat' in job && 'lng' in job) {
              const emoji = getEmojiForIndustry(job.industry);
              const salaryRange = getSalaryRange(job.salary_min, job.salary_max);
              const customIcon = L.divIcon({
                className: '',
                html: `
                  <div class="job-marker-icon">
                    <span class="job-marker">${emoji}</span>
                    <span class="job-tooltip">
                      <strong>${job.title || `Job ${index + 1}`}</strong><br>
                      ${job.company || ''}<br>
                      ${job.location || ''}<br>
                      ${salaryRange}
                    </span>
                  </div>
                `,
                iconSize: [30, 30],
                iconAnchor: [15, 15]
              });

              const marker = L.marker([job.lat, job.lng], { icon: customIcon });
              
              const popupContent = `
                <div class="custom-popup">
                  <h3>${job.title || `Job ${index + 1}`}</h3>
                  ${job.company ? `
                    <div class="job-detail">
                      <img src="https://cdn-icons-png.flaticon.com/512/2910/2910791.png" alt="Company" class="job-detail-icon">
                      <p>${job.company}</p>
                    </div>
                  ` : ''}
                  ${job.location ? `
                    <div class="job-detail">
                      <img src="https://cdn-icons-png.flaticon.com/512/484/484167.png" alt="Location" class="job-detail-icon">
                      <p>${job.location}</p>
                    </div>
                  ` : ''}
                  ${salaryRange ? `
                    <div class="job-detail">
                      <img src="https://cdn-icons-png.flaticon.com/512/2830/2830284.png" alt="Salary" class="job-detail-icon">
                      <p>${salaryRange}</p>
                    </div>
                  ` : ''}
                  ${job.job_type ? `
                    <div class="job-detail">
                      <img src="https://cdn-icons-png.flaticon.com/512/3281/3281289.png" alt="Job Type" class="job-detail-icon">
                      <p>${job.job_type}</p>
                    </div>
                  ` : ''}
                  ${job.industry ? `
                    <div class="job-detail">
                      <img src="https://cdn-icons-png.flaticon.com/512/2910/2910791.png" alt="Industry" class="job-detail-icon">
                      <p>${job.industry}</p>
                    </div>
                  ` : ''}
                  <button class="apply-now-btn" onclick="applyForJob(${job.id})">Apply Now</button>
                </div>
              `;
              marker.bindPopup(popupContent);
              
              markerClusterGroup.addLayer(marker);
            } else {
              console.error(`Invalid job data at index ${index}:`, job);
            }
          });

          map.addLayer(markerClusterGroup);
          
          // Adjust map size for mobile
          function adjustMapSize() {
            const mapContainer = document.getElementById('map');
            if (window.innerWidth <= 768) {
              mapContainer.style.height = '300px';
            } else {
              mapContainer.style.height = '100%';
            }
            map.invalidateSize();
          }

          window.addEventListener('resize', adjustMapSize);
          adjustMapSize();
        }

        function getEmojiForIndustry(industry) {
          const emojiMap = {
            'Software Development': 'üíª',
            'Data Science': 'üìä',
            'Cybersecurity': 'üîí',
            'AI/Machine Learning': 'ü§ñ',
            'Cloud Computing': '‚òÅÔ∏è',
            'DevOps': 'üõ†Ô∏è',
            'UX/UI Design': 'üé®',
            'Web Development': 'üåê',
            'Mobile Development': 'üì±',
            'Network Engineering': 'üåê',
            'IT Support': 'üñ•Ô∏è',
            'Database Administration': 'üóÑÔ∏è',
            'Blockchain': 'üîó',
            'IoT': 'üè†',
            'AR/VR': 'üëì',
            'Game Development': 'üéÆ',
            'Quantum Computing': 'üî¨',
            'Robotics': 'ü¶æ',
            'Bioinformatics': 'üß¨',
            'Telecommunications': 'üì°',
            'Other': 'üîß'
          };
          return emojiMap[industry] || 'üë®‚Äçüíª';
        }

        function getSalaryRange(min, max) {
          if (min && max) {
            return `$${min.toLocaleString()} - $${max.toLocaleString()}`;
          } else if (min) {
            return `$${min.toLocaleString()}+`;
          } else if (max) {
            return `Up to $${max.toLocaleString()}`;
          } else {
            return 'Salary not specified';
          }
        }

        // Update event listeners
        filterForm.addEventListener('change', updateFilters);

        const locationButtons = document.querySelectorAll('.location-filter-btn');
        const locationFilterInput = document.getElementById('location-filter');

        locationButtons.forEach(button => {
          button.addEventListener('click', function() {
            locationButtons.forEach(btn => btn.classList.remove('bg-orange-100', 'border-orange-500'));
            this.classList.add('bg-orange-100', 'border-orange-500');
            locationFilterInput.value = this.dataset.location;
            updateFilters();
          });
        });

        const industryButtons = document.querySelectorAll('.industry-filter-btn');
        const industryFilterInput = document.getElementById('industry-filter');

        industryButtons.forEach(button => {
          button.addEventListener('click', function() {
            industryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            industryFilterInput.value = this.dataset.industry;
            updateFilters();
          });
        });

        // Initialize map and fetch initial jobs
        initMap();
        fetchJobs(new URLSearchParams());

        // Update modal functionality
        const modal = document.getElementById("filterModal");
        const mapFilterBtn = document.getElementById("map-filter-btn");
        const span = document.getElementsByClassName("close")[0];
        const activeFiltersContainer = document.getElementById("activeFilters");

        mapFilterBtn.onclick = function() {
            modal.style.display = "block";
        }

        span.onclick = function() {
            modal.style.display = "none";
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
      });

      function applyForJob(jobId) {
        window.location.href = `/jobs/${jobId}/apply`;
      }
    <% end %>
</body>
</html>
