<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Freely - Work Freely, Hire Globally</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag 'application', media: 'all' %>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <style>
    .header-gradient {
      background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
    }
    .hero-section {
      background-image: url('https://images.pexels.com/photos/7134990/pexels-photo-7134990.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2');
      background-size: cover;
      background-position: center;
    }
    .filter-bar {
      background-color: #f3f4f6;
      border-bottom: 1px solid #e5e7eb;
    }
    .filter-item {
      @apply px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer;
    }
    .filter-button {
      @apply flex items-center justify-center w-24 h-24 rounded-full bg-white shadow-md hover:shadow-lg transition duration-300 cursor-pointer m-2;
    }
    .filter-button i {
      @apply text-2xl mb-1;
    }
    .filter-button span {
      @apply text-xs text-center;
    }
    .filter-button.active {
      @apply bg-blue-100;
    }
  </style>
</head>

<body class="flex flex-col h-screen bg-gray-50">
  <header class="bg-white shadow-md">
    <div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-4">
        <h1 class="text-2xl font-bold text-blue-600">Freely</h1>
        
        <nav class="hidden md:flex space-x-8">
          <a href="#" class="text-gray-600 hover:text-blue-600 transition duration-150">Jobs</a>
          <a href="#" class="text-gray-600 hover:text-blue-600 transition duration-150">Companies</a>
          <a href="#" class="text-gray-600 hover:text-blue-600 transition duration-150">Resources</a>
        </nav>
        
        <div class="flex-1 max-w-xl mx-8">
          <div class="flex rounded-lg overflow-hidden shadow-md">
            <input type="text" placeholder="Search jobs..." class="w-full px-4 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-300" />
            <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 transition duration-150">Search</button>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <a href="/signin" class="text-gray-600 hover:text-blue-600 transition duration-150">Sign In</a>
          <a href="/signup" class="bg-blue-600 text-white hover:bg-blue-700 font-semibold py-2 px-4 rounded-lg transition duration-150">Sign Up</a>
          <a href="/jobs/new" class="bg-green-500 text-white hover:bg-green-600 font-semibold py-2 px-4 rounded-lg transition duration-150">
            Post a Job
          </a>
        </div>
      </div>
    </div>
  </header>

 


  <main class="flex-1 overflow-hidden">
    <%= yield %>
  </main>

  <%= render 'layouts/footer' %>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const filterButtons = document.querySelectorAll('.filter-button');
      const activeFilters = new Set();

      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          const filter = this.dataset.filter;
          this.classList.toggle('active');
          
          if (activeFilters.has(filter)) {
            activeFilters.delete(filter);
          } else {
            activeFilters.add(filter);
          }

          applyFilters();
        });
      });

      function applyFilters() {
        const url = new URL(window.location);
        url.searchParams.delete('filters');
        if (activeFilters.size > 0) {
          url.searchParams.set('filters', Array.from(activeFilters).join(','));
        }
        history.pushState({}, '', url);

        // Fetch and update the job listings
        fetch(url)
          .then(response => response.text())
          .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newContent = doc.querySelector('main').innerHTML;
            document.querySelector('main').innerHTML = newContent;
          });
      }
    });
  </script>
</body>
</html>
